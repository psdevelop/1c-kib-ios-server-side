Функция УдаленноЗаписатьОбъект(УникальныйИдентификаторGUID, ЗначениеСтатуса, ИмяПользователя, ВидДействий, ТипОбъектов) Экспорт
	
	//прочитали заявку из XML получили допустим структуру данных заявки
	
	стрЗаявка = новый Структура;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ТекущийПользователь = 
		ПолучитьТекущегоПользователяWEB("Агличев В.В.                                      ");//ИмяПользователя);
	
	ДокументGUID = Новый УникальныйИдентификатор(УникальныйИдентификаторGUID);	
	Запрос = Новый Запрос;
	
	Если (ТипОбъектов=1) Тогда	
	
		ЗаявкаСсылка = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ЗаявкаНаРасходованиеСредств.Ссылка
			|ИЗ
			|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
			|ГДЕ
			|	бит_ЗаявкаНаРасходованиеСредств.Ссылка = &Ссылка";

	ИначеЕсли (ТипОбъектов=2) Тогда
			
		ЗаявкаСсылка = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
			|ИЗ
			|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
			|ГДЕ
			|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка = &Ссылка";
		
	ИначеЕсли (ТипОбъектов=3) Тогда
			
		ЗаявкаСсылка = Документы.бит_РеестрПлатежей.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_РеестрПлатежей.Ссылка
			|ИЗ
			|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
			|ГДЕ
			|	бит_РеестрПлатежей.Ссылка = &Ссылка";
		
	Иначе
	КонецЕсли;
			
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	РезультатМетодаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "metodXMLResult");
	ЛогическоеЗначениеУспешностиТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "logical_result");
	//СписокЗаявок = ФабрикаXDTO.Создать(СписокЗаявокТип);
	РезультатМетода = ФабрикаXDTO.Создать(РезультатМетодаТип);
	ЛогическоеЗначениеУспешности = ФабрикаXDTO.Создать(ЛогическоеЗначениеУспешностиТип);
    ЛогическоеЗначениеУспешности.doc_id = 
		УникальныйИдентификаторGUID;
		
	//обЗаявка = 
	//	Документы.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка().ПолучитьОбъект();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		обЗаявка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЛогическоеЗначениеУспешности.logical_value = "Без результата";
		ЛогическоеЗначениеУспешности.result_text = "Без результата";
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	//заполню структуру якобы она заполнена по входным данным
	
	//обЗаявка = заявка.ПолучитьОбъект();//только тип <Объект>  можно изменять
	
	стрЗаявка.Вставить("объект", обЗаявка);//получена по UUID из файла
	//стрЗаявка.Вставить("суммаДокумента", обЗаявка.СуммаДокумента);
	стрЗаявка.Вставить("Согласовать", истина);//если данный пользователь согласовал
	
	//обЗаявка.СуммаДокумента = стрЗаявка.СуммаДокумента;
		
	//Попытка
	//	обЗаявка.Записать();
	//Исключение
		//обработка неудачной записи можно обработать с помощью функции ОписаниеОшибки()
	//КонецПопытки;
	
	Если стрЗаявка.Согласовать Тогда//согласуем для текущего пользователя
		
		СписокВиз = ПолучитьСписокДоступныхВизДляСогласованияЗаявки(обЗаявка, ТекущийПользователь);
	
		СписокВизСтрока = "(";
		Для каждого ДоступнаяВиза Из СписокВиз Цикл
			СписокВизСтрока = СписокВизСтрока + ДоступнаяВиза.Значение.Наименование+" ";	
		КонецЦикла;
		СписокВизСтрока = СписокВизСтрока + ")";
		
		Если СписокВиз.Количество() = 0 Тогда//кто-то уже до нас согласовал заявку
			//что делать?????????????????????????????????????????????? 
			ЛогическоеЗначениеУспешности.logical_value = "Без результата";
			ЛогическоеЗначениеУспешности.result_text = "Нет доступных виз для согласования";
		ИначеЕсли списокВиз.Количество() > 0 Тогда
			
			Попытка
				//ПроставитьВсеВизы(ВыборкаДетальныеЗаписи.Ссылка, СписокВиз);
				//бит_Визирование.ПроставитьВсеВизыУдаленно(обЗаявка.Ссылка, СписокВиз);
				ПроставитьВсеВизыУдаленноОбъект(обЗаявка.Ссылка, СписокВиз, ТекущийПользователь);
				бит_Визирование.ДовыполнитьАлгоритмВизирования(обЗаявка);
				бит_Визирование.УстановитьКрайниеДатыВизирования(обЗаявка.Ссылка);
				новыйСписокВиз = ПолучитьСписокДоступныхВизДляСогласованияЗаявки(обЗаявка, ТекущийПользователь);
				
				ЗапросСтатусаПосле = Новый Запрос;
				Если (ТипОбъектов=1) Тогда
					обЗаявка.УстановитьСтатус( , , );
					ЗапросСтатусаПосле.Текст = 
					"ВЫБРАТЬ
					|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
					|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатусаДокумента
					|ИЗ
					|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|		ПО (бит_СтатусыОбъектов.Объект = бит_ЗаявкаНаРасходованиеСредств.Ссылка)
					|ГДЕ
					|	бит_СтатусыОбъектов.Статус.Порядок В
					|			(ВЫБРАТЬ
					|				МАКСИМУМ(бит_СтатусыОбъектов.Статус.Порядок) КАК СтатусПорядок
					|			ИЗ
					|				РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|			ГДЕ
					|				бит_СтатусыОбъектов.Объект.Ссылка = бит_ЗаявкаНаРасходованиеСредств.Ссылка)
					|	И бит_ЗаявкаНаРасходованиеСредств.Ссылка = &ЗаявкаСсылка
					|
					|УПОРЯДОЧИТЬ ПО
					|	бит_ЗаявкаНаРасходованиеСредств.Дата";
				
				ИначеЕсли (ТипОбъектов=2) Тогда
					обЗаявка.УстановитьСтатус();
					ЗапросСтатусаПосле.Текст = 
					"ВЫБРАТЬ
					|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
					|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатусаДокумента
					|ИЗ
					|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|		ПО (бит_СтатусыОбъектов.Объект = бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка)
					|ГДЕ
					|	бит_СтатусыОбъектов.Статус.Порядок В
					|			(ВЫБРАТЬ
					|				МАКСИМУМ(бит_СтатусыОбъектов.Статус.Порядок) КАК СтатусПорядок
					|			ИЗ
					|				РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|			ГДЕ
					|				бит_СтатусыОбъектов.Объект.Ссылка = бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка)
					|	И бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка = &ЗаявкаСсылка
					|
					|УПОРЯДОЧИТЬ ПО
					|	бит_ЗаявкаНаРасходованиеСредствОбщая.Дата";
					
				ИначеЕсли (ТипОбъектов=3) Тогда	
					обЗаявка.УстановитьСтатус();
					ЗапросСтатусаПосле.Текст = 
					"ВЫБРАТЬ
					|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
					|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатусаДокумента
					|ИЗ
					|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|		ПО (бит_СтатусыОбъектов.Объект = бит_РеестрПлатежей.Ссылка)
					|ГДЕ
					|	бит_СтатусыОбъектов.Статус.Порядок В
					|			(ВЫБРАТЬ
					|				МАКСИМУМ(бит_СтатусыОбъектов.Статус.Порядок) КАК СтатусПорядок
					|			ИЗ
					|				РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
					|			ГДЕ
					|				бит_СтатусыОбъектов.Объект.Ссылка = бит_РеестрПлатежей.Ссылка)
					|	И бит_РеестрПлатежей.Ссылка = &ЗаявкаСсылка
					|
					|УПОРЯДОЧИТЬ ПО
					|	бит_РеестрПлатежей.Дата";

				Иначе
					
				КонецЕсли;
				
				ЛогическоеЗначениеУспешности.logical_value = "Успешно проведено согласование";
				ЛогическоеЗначениеУспешности.comment = СписокВизСтрока;
				ЛогическоеЗначениеУспешности.result_text = "Неизвестный статус";
					
				ЗапросСтатусаПосле.УстановитьПараметр("ЗаявкаСсылка", обЗаявка.Ссылка);

				РезультатСтатусПосле = ЗапросСтатусаПосле.Выполнить();
	
				ВыборкаСтатусПосле= РезультатСтатусПосле.Выбрать();
				
				Пока ВыборкаСтатусПосле.Следующий() Цикл
					ЛогическоеЗначениеУспешности.result_text = ВыборкаСтатусПосле.Статус.Наименование;
				КонецЦикла;
				
				Если новыйСписокВиз.Количество() > 0 Тогда
					//ЛогическоеЗначениеУспешности.result_text = 
						//ЛогическоеЗначениеУспешности.result_text + " Есть возможность дальнейшего согласования Вами.";
				Иначе
					//ЛогическоеЗначениеУспешности.result_text = 
						//ЛогическоеЗначениеУспешности.result_text + " Возможности дальнейшего согласования Вами нет.";	
				КонецЕсли;
			Исключение
				ЛогическоеЗначениеУспешности.logical_value = "Ошибка";
				ЛогическоеЗначениеУспешности.result_text = "Ошибка установки виз";
			КонецПопытки;
					
			//Если новыйСписокВиз.Количество() > 0 Тогда
			//	
			//	//отправляем признак того, что заявку можно согласовать дальше по алгоритму данным пользователем
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	РезультатМетода.success_value = 
		ЛогическоеЗначениеУспешности;
	
	Возврат РезультатМетода;                               
КонецФункции

// NOVOROSS  Проставляе все доступные визы в таб. части Визы
//
// Параметры:
//  ТекущийОбъект  – ДокументСсылка
//  СписокВизПользователя – СписокЗначений
//
Процедура ПроставитьВсеВизыУдаленноОбъект(ТекущийОбъект,СписокВизПользователя, ТекущийПользователь) Экспорт
		
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",ТекущийОбъект);
	
	бит_Визирование.УстановитьВизы(Отбор,ТекущийПользователь,ТекущаяДата(),СписокВизПользователя);
	
КонецПроцедуры // бит_ПроставитьВсеВизы()

Процедура ПроставитьВсеВизы(Ссылка, СписокВиз)
	бит_Визирование.ПроставитьВсеВизы(ссылка, списокВиз);
	//бит_Визирование.ПроставитьВсеВизы(Ссылка, СписокВиз);
	
КонецПроцедуры

Процедура ПолучитьСписокДоступныхВизДляСогласованияЗаявки_Запросом(ТекущийОбъект, ТекущийПользователь)
		
КонецПроцедуры