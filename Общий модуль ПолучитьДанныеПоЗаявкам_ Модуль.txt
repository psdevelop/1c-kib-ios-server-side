Функция ПолучитьТекущегоПользователяWEB(ИмяПользователя) Экспорт
	ЗапросПользователя = Новый Запрос;
	ЗапросПользователя.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК ПользовательСсылка,
		|	Пользователи.ВерсияДанных,
		|	Пользователи.ПометкаУдаления,
		|	Пользователи.Предопределенный,
		|	Пользователи.Родитель,
		|	Пользователи.ЭтоГруппа,
		|	Пользователи.Код,
		|	Пользователи.Наименование,
		|	Пользователи.ФизЛицо
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Код = &ИмяПользователя";

	ЗапросПользователя.УстановитьПараметр("ИмяПользователя", ИмяПользователя);

	РезультатПользователи = ЗапросПользователя.Выполнить();

	ВыборкаДетальныеЗаписиПользователи = РезультатПользователи.Выбрать();

	ТекущийПользователь = 
	    Справочники.Пользователи.ПустаяСсылка();
		//ПараметрыСеанса.ТекущийПользователь.Ссылка;
	//ТекущийПользовательИмя = "admin3";
	Пока ВыборкаДетальныеЗаписиПользователи.Следующий() Цикл
		//ТекущийПользовательИмя = ВыборкаДетальныеЗаписиПользователи.Код;
		ТекущийПользователь  =  ВыборкаДетальныеЗаписиПользователи.ПользовательСсылка;
	КонецЦикла;
	
	Возврат ТекущийПользователь;
КонецФункции

Функция ПолучитьДанныеПоДокументамУдаленно (ИмяПользователя, 
	ВидОпераций, ДоДаты, СДаты, ПризнакСтатус, ПризнакНеСтатус, СтартоваяПозиция, 
	ДлинаВыборки, ТипДокументов, ДатаПоследнего, ИдентификаторПоследнего, Важность, СверхБюджета) Экспорт
//	() Экспорт
//Если необходимо, то использовать другие параметры
//надо учитывать, что сужение списка по параметрам
//передаваемым сервису, будет уменьшать размер
//XML-файла и нагрузку на вложенный цикл извлечения информации
//по визированию(уточни пож-та список возможных параметров), я понимаю так
//что первым из них будет идентификатор самого пользователя

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТекущийПользователь = 
		ПолучитьТекущегоПользователяWEB("Агличев В.В.                                      ");//ИмяПользователя);

	ДлинаВыборки = 20;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	ДоДатыЗначение = ДобавитьМесяц(ТекущаяДата(),1);
	Если ДоДаты="" Тогда
		ДоДатыЗначение = ДобавитьМесяц(ТекущаяДата(),1);
	Иначе
		Попытка
			ДоДатыЗначение = Дата(ДоДаты);
		Исключение
			ДоДатыЗначение = ДобавитьМесяц(ТекущаяДата(),1);
		КонецПопытки;
	КонецЕсли;
	
	СДатыЗначение = ДобавитьМесяц(ТекущаяДата(),-3);
	Если СДаты="" Тогда
		СДатыЗначение = ДобавитьМесяц(ТекущаяДата(),-3);
	Иначе
		;
		Попытка
			СДатыЗначение = Дата(СДаты);
		Исключение
			СДатыЗначение = ДобавитьМесяц(ТекущаяДата(),-3);
		КонецПопытки;
	КонецЕсли;
	
	//Если ДоДатыЗначение>ДобавитьМесяц(СДатыЗначение,4) Тогда
	//	 ДоДатыЗначение=ДобавитьМесяц(СДатыЗначение,3);
	//КонецЕсли;
	 
	//Если ДоДатыЗначение<=СДатыЗначение Тогда
	//	 ДоДатыЗначение=ДобавитьМесяц(СДатыЗначение,3);
	//КонецЕсли;
	
	ВажностьЗначениеПервое = Перечисления.бит_Важность.ПустаяСсылка();
	ВажностьЗначениеВторое = Перечисления.бит_Важность.ПустаяСсылка();
	Попытка
		Если НЕ ПустаяСтрока(Важность) Тогда
			Если Важность="hight" Тогда
				ВажностьЗначениеПервое = Перечисления.бит_Важность.Высокая;
				ВажностьЗначениеВторое = Перечисления.бит_Важность.Высокая;
			ИначеЕсли Важность="medium_low" Тогда
				ВажностьЗначениеПервое = Перечисления.бит_Важность.Средняя;
				ВажностьЗначениеВторое = Перечисления.бит_Важность.Низкая;
			Иначе
			КонецЕсли;
		Иначе
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	СверхБюджетаЗначение = Ложь;
	Попытка
		Если НЕ ПустаяСтрока(СверхБюджета) Тогда
			Если СверхБюджета="true" Тогда
				СверхБюджетаЗначение = Истина;
			Иначе
			КонецЕсли;
		Иначе
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	МаксимальныйСтатусЗаявки = 
		Справочники.бит_СтатусыОбъектов.Заявка_Закрыта.Порядок+100;
	МаксимальныйСтатусЗаявкиОбщей = 
		Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта.Порядок+100;
	МаксимальныйСтатуcРеестра = 
		Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден.Порядок+100;
	Попытка
		Если НЕ ПустаяСтрока(ПризнакНеСтатус) Тогда
			Если ПризнакНеСтатус="statemented" Тогда
				МаксимальныйСтатусЗаявки = 
					Справочники.бит_СтатусыОбъектов.Заявка_Утверждена.Порядок;
				МаксимальныйСтатусЗаявкиОбщей = 
					Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена.Порядок;
				МаксимальныйСтатуcРеестра = 
					Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден.Порядок;
			ИначеЕсли ПризнакНеСтатус="completed" Тогда
				МаксимальныйСтатусЗаявки = 
					Справочники.бит_СтатусыОбъектов.Заявка_Закрыта.Порядок;
				МаксимальныйСтатусЗаявкиОбщей = 
					Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта.Порядок;
				МаксимальныйСтатуcРеестра = 
					Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден.Порядок;
			Иначе
			КонецЕсли;
		Иначе
		КонецЕсли;
	Исключение 
	КонецПопытки;
	//второй запрос генерирует табличную часть согласования
	//для заявки - как мы решили только что - этой табличной части не надо
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Если (ТипДокументов=1) Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ	
		|	бит_ЗаявкаНаРасходованиеСредств.Ссылка,
		|	бит_ЗаявкаНаРасходованиеСредств.ВерсияДанных,
		|	бит_ЗаявкаНаРасходованиеСредств.ПометкаУдаления,
		|	бит_ЗаявкаНаРасходованиеСредств.Номер,
		|	бит_ЗаявкаНаРасходованиеСредств.Дата КАК Дата,
		|	бит_ЗаявкаНаРасходованиеСредств.Проведен,
		|	бит_ЗаявкаНаРасходованиеСредств.РучнаяКорректировка,
		|	бит_ЗаявкаНаРасходованиеСредств.ВидОперации,
		|	бит_ЗаявкаНаРасходованиеСредств.ДокументОснование,
		|	бит_ЗаявкаНаРасходованиеСредств.Организация,
		|	бит_ЗаявкаНаРасходованиеСредств.ТипЗаявки,
		|	бит_ЗаявкаНаРасходованиеСредств.ФормаОплаты,
		|	бит_ЗаявкаНаРасходованиеСредств.ЭтоКазначейство,
		|	бит_ЗаявкаНаРасходованиеСредств.НеВключатьВПлатежныйКалендарь,
		|	бит_ЗаявкаНаРасходованиеСредств.СверхБюджета,
		|	бит_ЗаявкаНаРасходованиеСредств.ДатаРасхода,
		|	бит_ЗаявкаНаРасходованиеСредств.СуммаВключаетНДС,
		|	бит_ЗаявкаНаРасходованиеСредств.ВалютаДокумента,
		|	бит_ЗаявкаНаРасходованиеСредств.КурсДокумента,
		|	бит_ЗаявкаНаРасходованиеСредств.КратностьДокумента,
		|	бит_ЗаявкаНаРасходованиеСредств.СтавкаНДС,
		|	бит_ЗаявкаНаРасходованиеСредств.Сумма,
		|	бит_ЗаявкаНаРасходованиеСредств.НДС,
		|	бит_ЗаявкаНаРасходованиеСредств.СуммаРегл,
		|	бит_ЗаявкаНаРасходованиеСредств.НДСРегл,
		|	бит_ЗаявкаНаРасходованиеСредств.СуммаУпр,
		|	бит_ЗаявкаНаРасходованиеСредств.НДСУпр,
		|	бит_ЗаявкаНаРасходованиеСредств.СуммаВзаиморасчеты,
		|	бит_ЗаявкаНаРасходованиеСредств.НДСВзаиморасчеты,
		|	бит_ЗаявкаНаРасходованиеСредств.Сценарий,
		|	бит_ЗаявкаНаРасходованиеСредств.СтатьяОборотов,
		|	бит_ЗаявкаНаРасходованиеСредств.ЦФО,
		|	бит_ЗаявкаНаРасходованиеСредств.Проект,
		|	бит_ЗаявкаНаРасходованиеСредств.НоменклатурнаяГруппа,
		|	бит_ЗаявкаНаРасходованиеСредств.НазначениеПлатежа,
		|	бит_ЗаявкаНаРасходованиеСредств.НазначениеПлатежаУпр,
		|	бит_ЗаявкаНаРасходованиеСредств.Контрагент,
		|	бит_ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента,
		|	бит_ЗаявкаНаРасходованиеСредств.Ответственный,
		|	бит_ЗаявкаНаРасходованиеСредств.Комментарий,
		|	бит_ЗаявкаНаРасходованиеСредств.ФизическоеЛицо,
		|	бит_ЗаявкаНаРасходованиеСредств.Важность,
		|	бит_ЗаявкаНаРасходованиеСредств.СоответствиеБюджету,
		|	бит_ЗаявкаНаРасходованиеСредств.СуммаДокумента,
		|	бит_ЗаявкаНаРасходованиеСредств.Касса,
		|	бит_ЗаявкаНаРасходованиеСредств.Исполнитель,
		|	бит_ЗаявкаНаРасходованиеСредств.ДатаПлатежаКрайняя 
		|	ПОМЕСТИТЬ ТаблицаПодчДокументы 
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
		|   ГДЕ  (Дата>=&СДаты) И (Дата<=&ДоДаты)  
		|   И (   ((Важность=&ВажностьПервая) ИЛИ (Важность=&ВажностьВторая)) 
		|	ИЛИ ( (&ВажностьПервая=&ВажностьПустая) И (&ВажностьВторая=&ВажностьПустая) )   )
		|	И ((СверхБюджета=&СверхБюджета) ИЛИ (&СверхБюджета=Ложь));
		| 
		|ВЫБРАТЬ ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
		|   бит_СтатусыОбъектов.Статус.Порядок КАК СтатусПорядок,
		|   бит_СтатусыОбъектов.ДатаИзмененияСтатуса,  
		|   ТаблицаПодчДокументы.Ссылка
		|	ПОМЕСТИТЬ ТаблицаВизыОбъектов
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы,  
		|		 РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|	ГДЕ (бит_СтатусыОбъектов.Объект=ТаблицаПодчДокументы.Ссылка);
		|	
		|ВЫБРАТЬ  ПЕРВЫЕ "+Строка(СтартоваяПозиция+ДлинаВыборки)+
		"	ТаблицаВизыОбъектов.Статус,
		|	ТаблицаВизыОбъектов.ДатаИзмененияСтатуса,
		|	ТаблицаПодчДокументы.* 
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектов
		|		ПО (ТаблицаВизыОбъектов.Ссылка = ТаблицаПодчДокументы.Ссылка)
		|  ГДЕ ТаблицаВизыОбъектов.ДатаИзмененияСтатуса В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ТаблицаВизыОбъектовВложенная.ДатаИзмененияСтатуса) КАК СтатусПорядок
		|			ИЗ
		|				ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектовВложенная
		|			ГДЕ
		|				ТаблицаВизыОбъектовВложенная.Ссылка = ТаблицаПодчДокументы.Ссылка) 
		|	И (ТаблицаВизыОбъектов.СтатусПорядок<&МаксимальныйПорядокСтатуса)
		|	УПОРЯДОЧИТЬ ПО
		|		ТаблицаПодчДокументы.Дата ВОЗР;
		|
		| УНИЧТОЖИТЬ ТаблицаПодчДокументы;
		| УНИЧТОЖИТЬ ТаблицаВизыОбъектов; ";
		
		Запрос.УстановитьПараметр("ВажностьПервая", ВажностьЗначениеПервое);
		Запрос.УстановитьПараметр("ВажностьВторая", ВажностьЗначениеВторое);
		Запрос.УстановитьПараметр("ВажностьПустая", Перечисления.бит_Важность.ПустаяСсылка());
		Запрос.УстановитьПараметр("СверхБюджета", СверхБюджетаЗначение);
		Запрос.УстановитьПараметр("МаксимальныйПорядокСтатуса", МаксимальныйСтатусЗаявки);
	ИначеЕсли (ТипДокументов=2) Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ  
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ВерсияДанных,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ПометкаУдаления,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Номер,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Дата КАК Дата,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Проведен,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.РучнаяКорректировка,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Организация,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ТипЗаявки,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ФормаОплаты,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ЭтоКазначейство,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ДатаРасхода,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ВалютаДокумента,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.КурсДокумента,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.КратностьДокумента,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.СтавкаНДС,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Сумма,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НДС,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.СуммаРегл,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НДСРегл,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.СуммаУпр,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НДСУпр,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Сценарий,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.СтатьяОборотов,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ЦФО,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Проект,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НоменклатурнаяГруппа,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НазначениеПлатежа,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НазначениеПлатежаУпр,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ответственный,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Комментарий,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.СуммаДокумента,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.НеВключатьВПлатежныйКалендарь,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.Исполнитель,
		|	бит_ЗаявкаНаРасходованиеСредствОбщая.ДатаПлатежаКрайняя
		|	ПОМЕСТИТЬ ТаблицаПодчДокументы 
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
		|   ГДЕ  (Дата>=&СДаты) И (Дата<=&ДоДаты);
		| 
		|ВЫБРАТЬ ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
		|   бит_СтатусыОбъектов.Статус.Порядок КАК СтатусПорядок,
		|   бит_СтатусыОбъектов.ДатаИзмененияСтатуса,  
		|   ТаблицаПодчДокументы.Ссылка
		|	ПОМЕСТИТЬ ТаблицаВизыОбъектов
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы,  
		|		 РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|	ГДЕ (бит_СтатусыОбъектов.Объект=ТаблицаПодчДокументы.Ссылка);
		|	
		|ВЫБРАТЬ ПЕРВЫЕ "+Строка(СтартоваяПозиция+ДлинаВыборки)+
		"	ТаблицаВизыОбъектов.Статус,
		|	ТаблицаВизыОбъектов.ДатаИзмененияСтатуса,
		|	ТаблицаПодчДокументы.* 
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектов
		|		ПО (ТаблицаВизыОбъектов.Ссылка = ТаблицаПодчДокументы.Ссылка)
		|  ГДЕ ТаблицаВизыОбъектов.ДатаИзмененияСтатуса В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ТаблицаВизыОбъектовВложенная.ДатаИзмененияСтатуса) КАК СтатусПорядок
		|			ИЗ
		|				ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектовВложенная
		|			ГДЕ
		|				ТаблицаВизыОбъектовВложенная.Ссылка = ТаблицаПодчДокументы.Ссылка) 
		|	И (ТаблицаВизыОбъектов.СтатусПорядок<&МаксимальныйПорядокСтатуса)
		|	УПОРЯДОЧИТЬ ПО
		|		ТаблицаПодчДокументы.Дата ВОЗР;
		|
		| УНИЧТОЖИТЬ ТаблицаПодчДокументы;
		| УНИЧТОЖИТЬ ТаблицаВизыОбъектов; ";
		
		Запрос.УстановитьПараметр("МаксимальныйПорядокСтатуса", МаксимальныйСтатусЗаявкиОбщей);
	ИначеЕсли (ТипДокументов=3) Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	бит_РеестрПлатежей.Ссылка,
		|	бит_РеестрПлатежей.ВерсияДанных,
		|	бит_РеестрПлатежей.ПометкаУдаления,
		|	бит_РеестрПлатежей.Номер,
		|	бит_РеестрПлатежей.Дата КАК Дата,
		|	бит_РеестрПлатежей.Проведен,
		|	бит_РеестрПлатежей.Организация,
		|	бит_РеестрПлатежей.Ответственный,
		|	бит_РеестрПлатежей.Комментарий,
		|	бит_РеестрПлатежей.ЦФО,
		|	бит_РеестрПлатежей.СтатьяОборотов,
		|	бит_РеестрПлатежей.Проект,
		|	бит_РеестрПлатежей.НеФормироватьПлатежныеПоручения 
		|	ПОМЕСТИТЬ ТаблицаПодчДокументы 
		|ИЗ
		|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
		|   ГДЕ  (Дата>=&СДаты) И (Дата<=&ДоДаты);
		| 
		|ВЫБРАТЬ ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
		|   бит_СтатусыОбъектов.Статус.Порядок КАК СтатусПорядок,
		|   бит_СтатусыОбъектов.ДатаИзмененияСтатуса,  
		|   ТаблицаПодчДокументы.Ссылка
		|	ПОМЕСТИТЬ ТаблицаВизыОбъектов
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы,  
		|		 РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|	ГДЕ (бит_СтатусыОбъектов.Объект=ТаблицаПодчДокументы.Ссылка);
		|	
		|ВЫБРАТЬ  ПЕРВЫЕ "+Строка(СтартоваяПозиция+ДлинаВыборки)+
        "	ТаблицаВизыОбъектов.Статус,
		|	ТаблицаВизыОбъектов.ДатаИзмененияСтатуса,
		|	ТаблицаПодчДокументы.* 
		|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектов
		|		ПО (ТаблицаВизыОбъектов.Ссылка = ТаблицаПодчДокументы.Ссылка)
		|  ГДЕ ТаблицаВизыОбъектов.ДатаИзмененияСтатуса В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ТаблицаВизыОбъектовВложенная.ДатаИзмененияСтатуса) КАК СтатусПорядок
		|			ИЗ
		|				ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектовВложенная
		|			ГДЕ
		|				ТаблицаВизыОбъектовВложенная.Ссылка = ТаблицаПодчДокументы.Ссылка) 
		|	И (ТаблицаВизыОбъектов.СтатусПорядок<&МаксимальныйПорядокСтатуса)
		|	УПОРЯДОЧИТЬ ПО
		|		ТаблицаПодчДокументы.Дата ВОЗР;
		|
		| УНИЧТОЖИТЬ ТаблицаПодчДокументы;
		| УНИЧТОЖИТЬ ТаблицаВизыОбъектов; ";
		
		Запрос.УстановитьПараметр("МаксимальныйПорядокСтатуса", МаксимальныйСтатуcРеестра);
		
	Иначе
		//
	КонецЕсли;

	//Запрос.УстановитьПараметр("ВидОпераций", ВидОпераций);
	Запрос.УстановитьПараметр("ДоДаты", ДоДатыЗначение);
	Запрос.УстановитьПараметр("СДаты", СДатыЗначение);

	РезультатЗаявки = Запрос.Выполнить();
	
	ВыборкаЗаявок = РезультатЗаявки.Выбрать();

	//тзЗаявки = Результат.выгрузить();
	//тзЗаявки.Колонки.Добавить("Согласовать", Новый ОписаниеТипов("булево"));
	
	//Для Каждого стр Из тзЗаявки Цикл
		
		//Данный запрос должен формировать значение статуса
		//и он же либо другой, признак возможности проведения согласования
		//текущим пользователем
	//	СписокВиз = ПолучитьСписокДоступныхВизДляСогласованияЗаявки(стр.Ссылка.ПолучитьОбъект(), ТекущийПользователь);
		
	//	Если списокВиз.Количество() > 0 Тогда
	//		стр.Согласовать = истина;
	//	Иначе
	//		стр.Согласовать = ложь;//для наглядности
	//	КонецЕсли;
		
	//КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	//(формирование пакета данных)
	СписокЗаявокТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "sel_docs_list");
	ТекущийПользовательИнфоТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "curr_user_info");
	ЭлементСпискаЗаявокТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "sel_doc");
	ТипДокументаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "doc_type");
	ВидОперацийТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "doc_group_definition");
	СтатьяОборотовТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "account");
	ДокументОснованиеТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "base_doc");
	ИсполнительТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "actor");
	ОтветственныйТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "actor");
	ОрганизацияТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "contragent");
	ЦФОТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "contragent");
	КонтрагентТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "contragent");
	ТипЗаявкиТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "order_type");
	ВажностьТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "importance_level");
	ФормаОплатыТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "payment_form");
	СценарийТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "scenary");
	ПроектТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "project");
	НоменклатурнаяГруппаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "nomenclature_group");
	КонтрактТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "contract");
	ВалютаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "currency");
	НалогТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "tax");
	СезонТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "season");
	РезультатМетодаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "metodXMLResult");
	ЛогическоеЗначениеУспешностиТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "logical_result");
	ВключенныеДокументыТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "include_docs_list");
	
	СписокЗаявок = ФабрикаXDTO.Создать(СписокЗаявокТип);
	РезультатМетода = ФабрикаXDTO.Создать(РезультатМетодаТип);
	ЛогическоеЗначениеУспешности = ФабрикаXDTO.Создать(ЛогическоеЗначениеУспешностиТип);
		
	ТекущийПользовательИнфо = ФабрикаXDTO.Создать(ТекущийПользовательИнфоТип);	
	ТекущийПользовательИнфо.login = 
		ТекущийПользователь.Код;
	СписокЗаявок.curr_user_info = ТекущийПользовательИнфо;
	
	ЭлементСпискаЗаявок = ФабрикаXDTO.Создать(ЭлементСпискаЗаявокТип);
	ПорядковыйНомерДокумента = 0;
	UUIDПоследнего = "";
	ДатаПоследнего = ТекущаяДата();
		
	//	Пока ВыборкаЗаявок.Следующий() Цикл
	//Для каждого ВыборкаЗаявок Из тзЗаявки Цикл
	Пока ВыборкаЗаявок.Следующий() Цикл
		//ВыборкаЗаявокРезультат
		Если (  (((ПорядковыйНомерДокумента>=СтартоваяПозиция) ИЛИ (СтартоваяПозиция<=0)) И 
			(ПорядковыйНомерДокумента<(СтартоваяПозиция+ДлинаВыборки))) )  Тогда
			ЭлементСпискаЗаявок = ФабрикаXDTO.Создать(ЭлементСпискаЗаявокТип);
			ТипДокумента = ФабрикаXDTO.Создать(ТипДокументаТип);
			ВидОпераций = ФабрикаXDTO.Создать(ВидОперацийТип);
			СтатьяОборотов = ФабрикаXDTO.Создать(СтатьяОборотовТип);
			ДокументОснование = ФабрикаXDTO.Создать(ДокументОснованиеТип);
			Исполнитель = ФабрикаXDTO.Создать(ИсполнительТип);
			Ответственный = ФабрикаXDTO.Создать(ОтветственныйТип);
			Организация = ФабрикаXDTO.Создать(ОрганизацияТип);
			ЦФО = ФабрикаXDTO.Создать(ЦФОТип);
			Контрагент = ФабрикаXDTO.Создать(КонтрагентТип);
			ТипЗаявки = ФабрикаXDTO.Создать(ТипЗаявкиТип);
			Важность = ФабрикаXDTO.Создать(ВажностьТип);
			ФормаОплаты = ФабрикаXDTO.Создать(ФормаОплатыТип);
			Сценарий = ФабрикаXDTO.Создать(СценарийТип);
			Проект = ФабрикаXDTO.Создать(ПроектТип);
			НоменклатурнаяГруппа = ФабрикаXDTO.Создать(НоменклатурнаяГруппаТип);
			Контракт = ФабрикаXDTO.Создать(КонтрактТип);
			Валюта = ФабрикаXDTO.Создать(ВалютаТип);
			Сезон = ФабрикаXDTO.Создать(СезонТип);
			Налог = ФабрикаXDTO.Создать(НалогТип);
			
			ЭлементСпискаЗаявок.list_index = 
				ПорядковыйНомерДокумента+1;
			ЭлементСпискаЗаявок.doc_id = 
				Строка(ВыборкаЗаявок.Ссылка.УникальныйИдентификатор());
			UUIDПоследнего = 
				Строка(ВыборкаЗаявок.Ссылка.УникальныйИдентификатор()); 
				
			ЭлементСпискаЗаявок.doc_code=ВыборкаЗаявок.Номер;
			ЭлементСпискаЗаявок.create_date =
				ВыборкаЗаявок.Дата;	
			ДатаПоследнего = 
				ВыборкаЗаявок.Дата;
			//Записываем значение СТАТУСА
			Если (ВыборкаЗаявок.Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка()) Тогда
				ЭлементСпискаЗаявок.statement_state = 
					"Неизвестно";
			Иначе	
				ЭлементСпискаЗаявок.statement_state = 
					ВыборкаЗаявок.Статус.Наименование;
			КонецЕсли;		
			
			ЭлементСпискаЗаявок.statement_date = 
				ВыборкаЗаявок.ДатаИзмененияСтатуса;
			
			//в отдельных свойствах ЭлементСпискаЗаявок также должны
			//записываться возможность операции согласования, то есть
			//буквально доступность кнопки, вызывающей сервис 
			//устанавливающий визу
			Если ТекущийПользователь=Справочники.Пользователи.ПустаяСсылка() Тогда
				ЭлементСпискаЗаявок.enable_statement_set = 
						ложь;		
			Иначе
				
			СписокВиз = ПолучитьСписокДоступныхВизДляСогласованияЗаявки(ВыборкаЗаявок.Ссылка.ПолучитьОбъект(), ТекущийПользователь);
			Если СписокВиз.Количество() > 0 Тогда
					ЭлементСпискаЗаявок.enable_statement_set = 
						истина;	
			Иначе
					ЭлементСпискаЗаявок.enable_statement_set = 
						ложь;//для наглядности
					КонецЕсли;
			КонецЕсли;
				
			//Отвественный.actor_id = ;
			Ответственный.actor_name = 
				ВыборкаЗаявок.Ответственный.ФизЛицо.Наименование;
			ЭлементСпискаЗаявок.responsible_person = 
				Ответственный;	
				
			//СтатьяОборотов.account_id = ;
			СтатьяОборотов.account_name = 
				ВыборкаЗаявок.СтатьяОборотов.Наименование;
			ЭлементСпискаЗаявок.turn_account = 
				СтатьяОборотов;	
				
			//Проект.project_id = ;
			Проект.project_name = 
				ВыборкаЗаявок.Проект.Наименование;
			ЭлементСпискаЗаявок.project = 
				Проект;
				
			ЦФО.contragent_name = 
				ВыборкаЗаявок.ЦФО.Наименование;	
			ЭлементСпискаЗаявок.cfo = 
				ЦФО;
				
			//Организация.contragent_id = ;
			Организация.contragent_name = 
				ВыборкаЗаявок.Организация.Наименование;
			ЭлементСпискаЗаявок.organization = 
				Организация;

			ЭлементСпискаЗаявок.comment = 
				ВыборкаЗаявок.Комментарий;	
			
			Если (ТипДокументов=1) ИЛИ (ТипДокументов=2) Тогда
				
				ЭлементСпискаЗаявок.no_include_in_pay_plan = 
					ВыборкаЗаявок.НеВключатьВПлатежныйКалендарь;
					
				ЭлементСпискаЗаявок.is_exchequer = 
					ВыборкаЗаявок.ЭтоКазначейство;	
					
				 ЭлементСпискаЗаявок.charge_date = 
				 	ВыборкаЗаявок.ДатаРасхода;
					
				ЭлементСпискаЗаявок.pay_target = 
				 	ВыборкаЗаявок.НазначениеПлатежа;
				ЭлементСпискаЗаявок.pay_target_manage = 
				 	ВыборкаЗаявок.НазначениеПлатежаУпр;
				
				Исполнитель.actor_name = 
					ВыборкаЗаявок.Исполнитель.ФизЛицо.Наименование;
				ЭлементСпискаЗаявок.executor = 
					Исполнитель;
				
				ФормаОплаты.payment_form_name = Строка(ВыборкаЗаявок.ФормаОплаты);
				ЭлементСпискаЗаявок.payment_form = ФормаОплаты;
				
				ТипЗаявки.order_type_id = -1;
				ТипЗаявки.order_type_name = Строка(ВыборкаЗаявок.ТипЗаявки);
				ЭлементСпискаЗаявок.doc_order_type = ТипЗаявки;
				
				НоменклатурнаяГруппа.nomenclature_group_name = 
					ВыборкаЗаявок.НоменклатурнаяГруппа.Наименование;
				ЭлементСпискаЗаявок.nomenclature_group = 
					НоменклатурнаяГруппа;
				
				ЭлементСпискаЗаявок.charge_max_date = ВыборкаЗаявок.ДатаПлатежаКрайняя;
				ЭлементСпискаЗаявок.doc_summ = ВыборкаЗаявок.СуммаДокумента;
				//ЭлементСпискаЗаявок.doc_summ_without_apt = Элемент.СуммаВключаетНДС;
				
				//Сценарий.scenary_id = ;
				Сценарий.scenary_name = ВыборкаЗаявок.Сценарий.Наименование;
				ЭлементСпискаЗаявок.scenary = Сценарий;
				
				//Валюта.currency_id = ;
				Валюта.currency_name = 
					ВыборкаЗаявок.ВалютаДокумента.Наименование;
				//Валюта.currency_exchange_rate = ;
				ЭлементСпискаЗаявок.charge_currency = 
					Валюта;
					
				//Налог.taxe_id = ;
					Налог.taxe_name = "";
					Налог.taxe_abs_value = ВыборкаЗаявок.НДС;
					ЭлементСпискаЗаявок.add_price_tax = 
						Налог;
				
				Если (ТипДокументов=1) Тогда
					ЭлементСпискаЗаявок.doc_type_id = 1;
					ТипДокумента.doc_type_id = 1;
					ТипДокумента.doc_type_name = "Заявки на расходование средств";
					ТипДокумента.doc_type_single_representation = "Заявка на расходование средств";
					ЭлементСпискаЗаявок.doc_type = ТипДокумента;
					ЭлементСпискаЗаявок.doc_name = 
						"Заявка на расходование денежных средств";
					ЭлементСпискаЗаявок.over_budget = ВыборкаЗаявок.СверхБюджета;
							
					ВидОпераций.doc_group_id = -1;                                           
					ВидОпераций.doc_group_name = Строка(ВыборкаЗаявок.ВидОперации);
					ЭлементСпискаЗаявок.doc_group_definition = ВидОпераций;
					
					ДокументОснование.base_doc_performance ="";
					ЭлементСпискаЗаявок.base_doc = ДокументОснование;	
				
					Контрагент.contragent_name = ВыборкаЗаявок.Контрагент.Наименование;
					ЭлементСпискаЗаявок.contragent = Контрагент;
					
					Важность.importance_level_name = Строка(ВыборкаЗаявок.Важность);
					ЭлементСпискаЗаявок.importance_level = Важность;
							
					Контракт.contract_name = 
						ВыборкаЗаявок.ДоговорКонтрагента.Наименование;
					ЭлементСпискаЗаявок.contract = 
						Контракт;
				
					Сезон.season_name = "";//Строка(ВыборкаЗаявок.Сезон);
					ЭлементСпискаЗаявок.season = 
						Сезон;
				Иначе		
					ЭлементСпискаЗаявок.doc_type_id = 2;
					ТипДокумента.doc_type_id = 2;
					ТипДокумента.doc_type_name = "Заявки на расходование средств(Общая)";
					ТипДокумента.doc_type_single_representation = "Заявка на расходование средств(Общая)";
					ЭлементСпискаЗаявок.doc_type = ТипДокумента;
					ЭлементСпискаЗаявок.doc_name = 
						"Заявка на расходование денежных средств(Общая)";
				КонецЕсли;
			ИначеЕсли (ТипДокументов=3) Тогда
				ЭлементСпискаЗаявок.doc_type_id = 3;
				ТипДокумента.doc_type_id = 3;
				ТипДокумента.doc_type_name = "Реестры платежей";
				ТипДокумента.doc_type_single_representation = "Реестр платежей";
				ЭлементСпискаЗаявок.doc_type = ТипДокумента;
				ЭлементСпискаЗаявок.doc_name = 
						"Реестр платежей";
			Иначе
			КонецЕсли;
				
			СписокЗаявок.sel_doc.Добавить(ЭлементСпискаЗаявок);
		КонецЕсли;
		ПорядковыйНомерДокумента = 
			ПорядковыйНомерДокумента + 1;
		Если ПорядковыйНомерДокумента>=(СтартоваяПозиция+ДлинаВыборки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЛогическоеЗначениеУспешности.logical_value = "Выполнено";
	ЛогическоеЗначениеУспешности.result_text = "Данные документов получены";
	
	РезультатМетода.last_uuid = 
		UUIDПоследнего;
	РезультатМетода.last_datetime = 
		ДатаПоследнего;
	РезультатМетода.success_value = 
		ЛогическоеЗначениеУспешности;
	РезультатМетода.doc_list = СписокЗаявок;
	//РезультатМетода.any_data = СписокЗаявок;
	
	Возврат РезультатМетода;
КонецФункции

Функция ПолучитьСписокДоступныхВизДляСогласованияЗаявки(ТекущийОбъект, Пользователь) Экспорт 
	
	ТекущийОбъект.мВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(Пользователь, ТекущийОбъект);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", ТекущийОбъект.Ссылка);
	
	НаборВизы = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(Отбор, "бит_УстановленныеВизы");
	
	ТаблицаВизы = НаборВизы.Выгрузить();
	
	// Реквизит4 определяет доступность визы. Текст, т.к. в упр. форме нельзя сменить тип
	ТаблицаВизы.Колонки.Добавить("Реквизит4",Новый ОписаниеТипов("Строка"));
	
	// заполним Реквизит4
	Для каждого СтрокаТаблицы Из ТаблицаВизы Цикл
	
		Если НЕ ТекущийОбъект.мВизыПользователя.НайтиПоЗначению(СтрокаТаблицы.Виза) = Неопределено Тогда
		
			 СтрокаТаблицы.Реквизит4 = "ИСТИНА"; 
			 
		ИначеЕсли НЕ ТекущийОбъект.мВизыПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) = Неопределено Тогда
			 
			 СтрокаТаблицы.Реквизит4 = "ИСТИНА";
		
		КонецЕсли; 
	
	КонецЦикла;
	//получим алгоритм визирования, если таковой есть
	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	Для каждого СтрокаВизы Из ТаблицаВизы Цикл
	
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
		
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	// определяем, какие точки алгоритма доступны
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы, флВыполнятьПоэтапно);
	
	СписокВизПользователя = Новый СписокЗначений;
	
	Для каждого СтрокаТаблицы Из локТаблицаТочкиВизы Цикл
	
		Если СтрокаТаблицы.Доступность Тогда
		
			СписокВизПользователя.Добавить(СтрокаТаблицы.Виза);
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат СписокВизПользователя;	
КонецФункции

Функция ПолучитьДанныеДокументаУдаленно(ТипОбъектов, УникальныйИдентификаторGUID, ИмяПользователя, ТипДанных) Экспорт
	
	//прочитали заявку из XML получили допустим структуру данных заявки
	
	стрЗаявка = новый Структура;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ТекущийПользователь = 
		ПолучитьТекущегоПользователяWEB("Агличев В.В.                                      ");//ИмяПользователя);
	
	ДокументGUID = Новый УникальныйИдентификатор(УникальныйИдентификаторGUID);	
	Запрос = Новый Запрос;
	
	Если (ТипОбъектов=1) Тогда	
	
		ЗаявкаСсылка = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ЗаявкаНаРасходованиеСредств.Ссылка
			|ИЗ
			|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
			|ГДЕ
			|	бит_ЗаявкаНаРасходованиеСредств.Ссылка = &Ссылка";

	ИначеЕсли (ТипОбъектов=2) Тогда
			
		ЗаявкаСсылка = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
			|ИЗ
			|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
			|ГДЕ
			|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка = &Ссылка";
		
	ИначеЕсли (ТипОбъектов=3) Тогда
			
		ЗаявкаСсылка = Документы.бит_РеестрПлатежей.ПолучитьСсылку(ДокументGUID);
	 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_РеестрПлатежей.Ссылка
			|ИЗ
			|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
			|ГДЕ
			|	бит_РеестрПлатежей.Ссылка = &Ссылка";
		
	Иначе
	КонецЕсли;
			
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);

	//Результат = Запрос.Выполнить();

	//ВыборкаДетальныеЗаписи = Результат.Выбрать();

	РезультатМетодаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "sel_doc");
	ЛогическоеЗначениеУспешностиТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "logical_result");
	ВключенныеДокументыТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "include_docs_list");
	СписокСогласованийДокументаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "statement_list");
	ВключенныйДокументТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "sel_doc");
	СогласованиеДокументаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "statement_item");
	ДействующееЛицоТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "actor");
	СвязаннаяСущностьТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "relative_entity");
	
	РезультатМетода = ФабрикаXDTO.Создать(РезультатМетодаТип);
	ЛогическоеЗначениеУспешности = ФабрикаXDTO.Создать(ЛогическоеЗначениеУспешностиТип);
    ЛогическоеЗначениеУспешности.doc_id = 
		УникальныйИдентификаторGUID;
	СписокСогласованийДокумента = ФабрикаXDTO.Создать(СписокСогласованийДокументаТип);
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
	//КонецЦикла;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
    //обЗаявка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//	РезультатМетода.doc_id = 
	//			Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
	обЗаявка = ЗаявкаСсылка.ПолучитьОбъект();
	РезультатМетода.doc_id = УникальныйИдентификаторGUID;
		//Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());			
				
		
	ЛогическоеЗначениеУспешности.logical_value = "Без результата";
	ЛогическоеЗначениеУспешности.result_text = "Без результата";
	
	Если (ТипДанных="vises") ИЛИ (ТипДанных="all") Тогда
	УстановленныеВизыЗапрос = Новый Запрос;
	УстановленныеВизыЗапрос.Текст = 
		"ВЫБРАТЬ
		|	бит_УстановленныеВизы.Объект.Ссылка,
		|	ЕСТЬNULL(бит_УстановленныеВизы.Виза.Наименование, &НулеваяСтрока) КАК ВизаНаименование,
		|	бит_УстановленныеВизы.ДатаКрайняя,
		|	бит_УстановленныеВизы.ДатаУстановки,
		|	бит_УстановленныеВизы.Комментарий,
		|	бит_УстановленныеВизы.Должность,
		|	бит_УстановленныеВизы.ДобавленаВручную,
		|	бит_УстановленныеВизы.Пользователь.Наименование КАК Пользователь_Наименование,
		|	ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо.Наименование, &НулеваяСтрока) КАК ФизическоеЛицоНаименование,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическиеЛица
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	бит_УстановленныеВизы.Объект.Ссылка = &ТребДокументСсылка";

	УстановленныеВизыЗапрос.УстановитьПараметр("ТребДокументСсылка", ЗаявкаСсылка);
    УстановленныеВизыЗапрос.УстановитьПараметр("НулеваяСтрока", "");
	
	УстановленныеВизыРезультат = УстановленныеВизыЗапрос.Выполнить();

	ВыборкаУстановленныеВизы = УстановленныеВизыРезультат.Выбрать();

	Пока ВыборкаУстановленныеВизы.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СогласованиеДокумента = 
			ФабрикаXDTO.Создать(СогласованиеДокументаТип);
		ДействующееЛицо = 
			ФабрикаXDTO.Создать(ДействующееЛицоТип);
		СвязаннаяСущность = 
			ФабрикаXDTO.Создать(СвязаннаяСущностьТип);
				
		СогласованиеДокумента.vise = 
			ВыборкаУстановленныеВизы.ВизаНаименование;
		Попытка
			СогласованиеДокумента.post = 
				Строка(ВыборкаУстановленныеВизы.Должность);
		Исключение
			СогласованиеДокумента.post = "---";
		КонецПопытки;
		Попытка
			СогласованиеДокумента.solution = 
				Строка(ВыборкаУстановленныеВизы.Решение);
		Исключение
			СогласованиеДокумента.solution = "---";
		КонецПопытки;
		Попытка
			СогласованиеДокумента.person_names = 
				Строка(ВыборкаУстановленныеВизы.ФизическиеЛица);
		Исключение
			СогласованиеДокумента.person_names = "---";
		КонецПопытки;
		Попытка
			СогласованиеДокумента.statement_actor = 
				ВыборкаУстановленныеВизы.Пользователь_Наименование;
		Исключение
			СогласованиеДокумента.statement_actor = "---";
		КонецПопытки;
		СогласованиеДокумента.set_date = 
			ВыборкаУстановленныеВизы.ДатаУстановки;
		СогласованиеДокумента.set_max_date = 
			ВыборкаУстановленныеВизы.ДатаКрайняя;
		СогласованиеДокумента.comment = 
			ВыборкаУстановленныеВизы.Комментарий;
		СогласованиеДокумента.is_manual = 
			ВыборкаУстановленныеВизы.ДобавленаВручную;
		
		СписокСогласованийДокумента.
			statement_item.Добавить(СогласованиеДокумента);
						
	КонецЦикла;
		
	РезультатМетода.statement_list = 
					СписокСогласованийДокумента;
	КонецЕсли;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Если (ТипДанных="include_docs") ИЛИ (ТипДанных="all") Тогда
	Если (ТипОбъектов=3) Тогда
				ВключенныеДокументы = 
					ФабрикаXDTO.Создать(ВключенныеДокументыТип);				
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

				ЗапросЗаявкиРеестра = Новый Запрос;
				ЗапросЗаявкиРеестра.Текст = 
				"ВЫБРАТЬ 
				|	бит_ЗаявкаНаРасходованиеСредств.Ссылка,
				|	бит_ЗаявкаНаРасходованиеСредств.Номер,
				|	бит_ЗаявкаНаРасходованиеСредств.Дата,
				|	бит_ЗаявкаНаРасходованиеСредств.СуммаДокумента,
				|	бит_ЗаявкаНаРасходованиеСредств.ФормаОплаты,
				|	бит_ЗаявкаНаРасходованиеСредств.Организация,
				|	бит_ЗаявкаНаРасходованиеСредств.ВалютаДокумента 
				|   ПОМЕСТИТЬ ТаблицаПодчДокументы 
				|ИЗ
				|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей,
				|		 Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств 
				|ГДЕ
				|	(бит_РеестрПлатежей.Ссылка = &РеестрСсылка) И (бит_РеестрПлатежей.Заявки.Заявка.Ссылка = бит_ЗаявкаНаРасходованиеСредств.Ссылка);
				|ВЫБРАТЬ ЕСТЬNULL(бит_СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
				|   бит_СтатусыОбъектов.Статус.Порядок КАК СтатусПорядок,
				|   бит_СтатусыОбъектов.ДатаИзмененияСтатуса,  
				|   ТаблицаПодчДокументы.Ссылка
				|	ПОМЕСТИТЬ ТаблицаВизыОбъектов
				|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы,  
				|		 РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
				|	ГДЕ (бит_СтатусыОбъектов.Объект=ТаблицаПодчДокументы.Ссылка);
				|	
				|ВЫБРАТЬ 
				|	ТаблицаВизыОбъектов.Статус,
				|	ТаблицаВизыОбъектов.ДатаИзмененияСтатуса,
				|	ТаблицаПодчДокументы.Ссылка,
				|	ТаблицаПодчДокументы.Номер,
				|	ТаблицаПодчДокументы.Дата,
				|	ТаблицаПодчДокументы.СуммаДокумента,
				|	ТаблицаПодчДокументы.ФормаОплаты,
				|	ТаблицаПодчДокументы.Организация,
				|	ТаблицаПодчДокументы.ВалютаДокумента
				|   ИЗ ТаблицаПодчДокументы КАК ТаблицаПодчДокументы 
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектов
				|		ПО (ТаблицаВизыОбъектов.Ссылка = ТаблицаПодчДокументы.Ссылка)
				|  ГДЕ ТаблицаВизыОбъектов.ДатаИзмененияСтатуса В
				|			(ВЫБРАТЬ
				|				МАКСИМУМ(ТаблицаВизыОбъектовВложенная.ДатаИзмененияСтатуса) КАК СтатусПорядок
				|			ИЗ
				|				ТаблицаВизыОбъектов КАК ТаблицаВизыОбъектовВложенная
				|			ГДЕ
				|				ТаблицаВизыОбъектовВложенная.Ссылка = ТаблицаПодчДокументы.Ссылка);
				|
				| УНИЧТОЖИТЬ ТаблицаПодчДокументы;
				| УНИЧТОЖИТЬ ТаблицаВизыОбъектов; ";

				ЗапросЗаявкиРеестра.УстановитьПараметр("РеестрСсылка", ЗаявкаСсылка);
				РезультатЗаявкиРеестра = ЗапросЗаявкиРеестра.Выполнить();

				ВыборкаДетальныеЗаписиЗаявкиРеестра = РезультатЗаявкиРеестра.Выбрать();

				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//КонецЦикла;

				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТ
				
				Пока ВыборкаДетальныеЗаписиЗаявкиРеестра.Следующий() Цикл
				//Для каждого ЗаявкаРеестра Из ЗаявкиРеестра Цикл
			    	ВключенныйДокумент = 
						ФабрикаXDTO.Создать(ВключенныйДокументТип);
						
					ВключенныйДокумент.doc_code=ВыборкаДетальныеЗаписиЗаявкиРеестра.Номер;
					
					//Записываем значение СТАТУСА
					Если (ВыборкаДетальныеЗаписиЗаявкиРеестра.Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка()) Тогда
						ВключенныйДокумент.statement_state = 
							"Неизвестно";
					Иначе	
						ВключенныйДокумент.statement_state = 
							ВыборкаДетальныеЗаписиЗаявкиРеестра.Статус.Наименование;
					КонецЕсли;
						
					ВключенныйДокумент.org_name = 
						ВыборкаДетальныеЗаписиЗаявкиРеестра.Организация.Наименование;
					ВключенныйДокумент.curr_name = 
						ВыборкаДетальныеЗаписиЗаявкиРеестра.ВалютаДокумента.Наименование;
					ВключенныйДокумент.doc_summ = 
						ВыборкаДетальныеЗаписиЗаявкиРеестра.СуммаДокумента;
					Попытка	
						ВключенныйДокумент.payment_form_name = 
							Строка(ВыборкаДетальныеЗаписиЗаявкиРеестра.ФормаОплаты);
					Исключение
						ВключенныйДокумент.payment_form_name = "---";
					КонецПопытки;
					
					ВключенныеДокументы.include_doc.Добавить(ВключенныйДокумент);
				КонецЦикла;
				
				РезультатМетода.payment_doc_list = 
					ВключенныеДокументы;
					
					
					
	Иначе
	КонецЕсли;
	КонецЕсли;
	
	РезультатМетода.success_value = 
		ЛогическоеЗначениеУспешности;
	
	Возврат РезультатМетода;
	
КонецФункции

Функция ПолучитьТекущиеПоказателиУдаленно(ИмяПользователя) Экспорт
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ЗаявкаНаРасходованиеСредств.Ссылка,
		|	бит_ЗаявкаНаРасходованиеСредств.Дата КАК ДатаДокумента,
		|	ВЫБОР
		|   	КОГДА бит_ЗаявкаНаРасходованиеСредств.Важность = ЗНАЧЕНИЕ(Перечисление.бит_Важность.Высокая)
		|       	ТОГДА 1
		|           ИНАЧЕ 0
		|      	КОНЕЦ КАК СВысокойВажностью,
		|	ВЫБОР
		|   	КОГДА (бит_ЗаявкаНаРасходованиеСредств.Важность = ЗНАЧЕНИЕ(Перечисление.бит_Важность.Средняя)) ИЛИ 
		|				(бит_ЗаявкаНаРасходованиеСредств.Важность = ЗНАЧЕНИЕ(Перечисление.бит_Важность.Низкая))		
		|       	ТОГДА 1
		|           ИНАЧЕ 0
		|      	КОНЕЦ КАК СоСреднейИлиНизкойВажностью,
		|	ВЫБОР
		|   	КОГДА бит_ЗаявкаНаРасходованиеСредств.СверхБюджета 		
		|       	ТОГДА 1
		|           ИНАЧЕ 0
		|      	КОНЕЦ КАК ИнкрементСверхБюджета,
		|	бит_ЗаявкаНаРасходованиеСредств.Важность,
		|	бит_ЗаявкаНаРасходованиеСредств.СверхБюджета, 
		|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса 
		|	ПОМЕСТИТЬ ЗаписиРабочие
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств, 
		|		РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|	
		|ГДЕ
		|	(бит_СтатусыОбъектов.Объект = бит_ЗаявкаНаРасходованиеСредств.Ссылка) И
		|	(бит_СтатусыОбъектов.Статус = 
		|	ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Рабочая)); 
		|
		|ВЫБРАТЬ
		|	бит_ЗаявкаНаРасходованиеСредств.Ссылка, 
		|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса 
		|	ПОМЕСТИТЬ ЗаписиУтверждения
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств, 
		|		РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|	
		|ГДЕ
		|	(бит_СтатусыОбъектов.Объект = бит_ЗаявкаНаРасходованиеСредств.Ссылка) И
		|	(бит_СтатусыОбъектов.Статус = 
		|	ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)); 
		|
		|ВЫБРАТЬ
		|	СУММА(ЗаписиРабочие.СВысокойВажностью) КАК СуммаСВысокойВажностью,
		|	СУММА(ЗаписиРабочие.СоСреднейИлиНизкойВажностью) КАК СуммаСоСреднейИлиНизкойВажностью,
		|	СУММА(ЗаписиРабочие.ИнкрементСверхБюджета) КАК СуммаСверхБюджета,
		|	МИНИМУМ(ЗаписиРабочие.ДатаДокумента) КАК МинимумДатаДокумента, 
		|	МАКСИМУМ(ЗаписиРабочие.ДатаДокумента) КАК МаксимумДатаДокумента
		|ИЗ
		|	ЗаписиРабочие КАК ЗаписиРабочие 	 
		|	
		|ГДЕ
		|	(ЗаписиРабочие.Ссылка НЕ В (ВЫБРАТЬ ЗаписиУтверждения.Ссылка 
		|	ИЗ ЗаписиУтверждения КАК ЗаписиУтверждения));
		| УНИЧТОЖИТЬ ЗаписиРабочие;
		| УНИЧТОЖИТЬ ЗаписиУтверждения; ";
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	РезультатМетодаТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "indicator_list");
	//ЛогическоеЗначениеУспешностиТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "logical_result");
	ИндикаторТип = ФабрикаXDTO.Тип("http://www.xmlaccount.org/UniDocPerformList/", "indicator");
	
	РезультатМетода = ФабрикаXDTO.Создать(РезультатМетодаТип);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Индикатор = ФабрикаXDTO.Создать(ИндикаторТип);
		Индикатор.message = "СуммаСВысокойВажностью";
		Индикатор.counter = ВыборкаДетальныеЗаписи.СуммаСВысокойВажностью;
		Индикатор.min_date = ВыборкаДетальныеЗаписи.МинимумДатаДокумента;
		Индикатор.max_date = ВыборкаДетальныеЗаписи.МаксимумДатаДокумента;
		РезультатМетода.indicator.Добавить(Индикатор);
		
		Индикатор = ФабрикаXDTO.Создать(ИндикаторТип);
		Индикатор.message = "СуммаСоСреднейИлиНизкойВажностью";
		Индикатор.counter = ВыборкаДетальныеЗаписи.СуммаСоСреднейИлиНизкойВажностью;
		РезультатМетода.indicator.Добавить(Индикатор);
		
		Индикатор = ФабрикаXDTO.Создать(ИндикаторТип);
		Индикатор.message = "СуммаСверхБюджета";
		Индикатор.counter = ВыборкаДетальныеЗаписи.СуммаСверхБюджета;
		РезультатМетода.indicator.Добавить(Индикатор);
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЗапросРеестры = Новый Запрос;
	ЗапросРеестры.Текст = 
		"ВЫБРАТЬ
		|	бит_РеестрПлатежей.Ссылка,
		|	бит_РеестрПлатежей.Дата
		|   ПОМЕСТИТЬ РеестрыУтвержденные 
		|ИЗ
		|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей,
		|		РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|ГДЕ (бит_СтатусыОбъектов.Объект = бит_РеестрПлатежей.Ссылка) И 
		|	(бит_СтатусыОбъектов.Статус = 
		|	ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден)); 
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(МИНИМУМ(бит_РеестрПлатежей.Дата), &ДатаПоУмолчанию) КАК МинимальнаяДатаРеестр, 
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_РеестрПлатежей.Ссылка) КАК КоличествоНеутвержденныхРеестров 
		|ИЗ Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей   
		|	 
		|ГДЕ (бит_РеестрПлатежей.Ссылка НЕ В (ВЫБРАТЬ РеестрыУтвержденные.Ссылка 
		| ИЗ РеестрыУтвержденные КАК РеестрыУтвержденные)); 
		|УНИЧТОЖИТЬ РеестрыУтвержденные;";

	ЗапросРеестры.УстановитьПараметр("ДатаПоУмолчанию", ДобавитьМесяц(ТекущаяДата(),-3));
	РезультатРеестры = ЗапросРеестры.Выполнить();

	ВыборкаДетальныеЗаписиРеестры = РезультатРеестры.Выбрать();

	Пока ВыборкаДетальныеЗаписиРеестры.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Индикатор = ФабрикаXDTO.Создать(ИндикаторТип);
		Индикатор.message = "РеестрыПлатежейНеутвержденные";
		
		Индикатор.min_date = ВыборкаДетальныеЗаписиРеестры.МинимальнаяДатаРеестр;
		Попытка
			Индикатор.counter = ВыборкаДетальныеЗаписиРеестры.КоличествоНеутвержденныхРеестров;
		Исключение
			Индикатор.counter = 0;
		КонецПопытки;
		РезультатМетода.indicator.Добавить(Индикатор); 
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат РезультатМетода;
	
КонецФункции